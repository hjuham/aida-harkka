{"version":3,"file":"static/js/728.bfd8688f.chunk.js","mappings":"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","sources":["assets/bars-solid.svg","utils/setCustomBounds.js","components/MapMethods.js","hooks/useNavigateCities.js","utils/filterTasks.js","hooks/useEsc.js"],"sourcesContent":["var _path;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgBarsSolid(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    viewBox: \"0 0 448 512\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    fill: \"white\",\n    d: \"M0 96C0 78.3 14.3 64 32 64H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32C14.3 128 0 113.7 0 96zM0 256c0-17.7 14.3-32 32-32H416c17.7 0 32 14.3 32 32s-14.3 32-32 32H32c-17.7 0-32-14.3-32-32zM448 416c0 17.7-14.3 32-32 32H32c-17.7 0-32-14.3-32-32s14.3-32 32-32H416c17.7 0 32 14.3 32 32z\"\n  })));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgBarsSolid);\nexport default __webpack_public_path__ + \"static/media/bars-solid.03d9a55d579bbbad87f8c39039051621.svg\";\nexport { ForwardRef as ReactComponent };","/**\r\n * Apufunktio reittien hakemiseen kartan alueelta\r\n * @param map - Kartta viite\r\n * @param setBounds - Haettavan alueen asettaminen\r\n * @param setError - Virheilmoituksen asettaminen mikäli alue ei ole soveltuva\r\n */\r\nconst setCustomBounds = (map, setBounds, setError) => {\r\n    const bounds = map.getBounds();\r\n    //Pyöristetään koordinaatit Digitraficin käyttämälle tarkkuudelle\r\n    let roundedBounds = [\r\n        [\r\n            Math.round(bounds._southWest.lat * 2) / 2, //y-min\r\n            Math.round(bounds._southWest.lng), //x-min\r\n        ],\r\n        [\r\n            Math.round(bounds._northEast.lat * 2) / 2, //y-max\r\n            Math.round(bounds._northEast.lng), //x-max\r\n        ],\r\n    ];\r\n    //Tunnista jos koordinaatit muodostavat pistemäisen tai yksiulotteisen alueen\r\n    //Muuta koordinaattien alue ei-pistemäiseksi ja ei-yksiulotteiseksi\r\n    if (roundedBounds[0][0] === roundedBounds[1][0]) {\r\n        roundedBounds[0][0] -= 0.5;\r\n        roundedBounds[1][0] += 0.5;\r\n    }\r\n    if (roundedBounds[0][1] === roundedBounds[1][1]) {\r\n        roundedBounds[0][1] -= 1;\r\n        roundedBounds[1][1] += 1;\r\n    }\r\n\r\n    //Tunnista jos koordinaatit eivät ole Digitraficin tukemalla alueella x:19-32, y:59-72\r\n    if (\r\n        roundedBounds[0][0] >= 59 &&\r\n        roundedBounds[0][0] <= 72 &&\r\n        roundedBounds[1][0] >= 59 &&\r\n        roundedBounds[1][0] <= 72 &&\r\n        roundedBounds[0][1] >= 19 &&\r\n        roundedBounds[0][1] <= 32 &&\r\n        roundedBounds[1][1] >= 19 &&\r\n        roundedBounds[1][1] <= 32\r\n    ) {\r\n        setBounds(roundedBounds);\r\n        setError();\r\n    } else {\r\n        setError(\"Kartan alue ei ole Digitrafficin tukema\");\r\n    }\r\n};\r\n\r\nexport default setCustomBounds;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport bars from \"../assets/bars-solid.svg\";\r\nimport cities from \"../data/fi.json\";\r\nimport { useMapContext } from \"../contexts/MapContext\";\r\nimport setCustomBounds from \"../utils/setCustomBounds\";\r\nimport useEsc from \"../hooks/useEsc\";\r\nimport useNavigateCities from \"../hooks/useNavigateCities\";\r\nimport {\r\n    toggleSelection,\r\n    handleFilter,\r\n    handleReset,\r\n    handleEmpty,\r\n} from \"../utils/filterTasks\";\r\nimport moveMap from \"../utils/moveMap\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\n/**\r\n * Kartan metodit. Sisältää karttaan vaikuttavat metodit. Aukeaa oikeasta yläkulmasta ja on mahdollista sulkea.\r\n * Sisältää kaupunkien haun, kartan alueella olevien reittien haun, tilastoikkunan avaamisen ja tehtävätyyppien suodattamisen.\r\n * Kutsu Map.js-komponentissa.\r\n * @param {map} map - Viite kartaan\r\n * @param {function} setShowStatBox - Piilota ja näytä tilastolaatikko\r\n * @param {Object[]} tasksFi - Tehtävänimikkeiden tila, joka sisältätävät suomenkielisen nimikkeen\r\n * @param {function} setTasksFi - Aseta tehtävänimikkeet suodatuksen mukaan (muokkaamalla tehtävätyypin show-arvoa)\r\n * @param {string} type - Kartan tyyppi, jota käytetään asettamaan suodatus oletusarvoihin\r\n */\r\n\r\nexport default function MapMethods({\r\n    map,\r\n    setShowStatBox,\r\n    tasksFi,\r\n    setTasksFi,\r\n    type,\r\n}) {\r\n    const [display, setDisplay] = useState(false);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState();\r\n    const [search, setSearch] = useState(\"\");\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const [results, setResults] = useState([]);\r\n    //tasks on listan tehtävät ja setTasks kutsutaan jokaisen painalluksen jälkeen\r\n    //taskFi sisältää globaalit tehtävät ja setTasksFi kutsutaan kun tehtävätyypit halutaan suodattaa tai asettaa oletuksiin\r\n    const [tasks, setTasks] = useState([]);\r\n    const [filterError, setFilterError] = useState();\r\n    const { setPosition, setBounds } = useMapContext();\r\n\r\n    //Aseta komponentin näyttämä lista tehtäviä vastaamaan näytettäviä reittejä ja ajoneuvoja\r\n    useEffect(() => {\r\n        setTasks(tasksFi);\r\n        setLoading(false);\r\n    }, [tasksFi]);\r\n    //Piilota ja näytä metodit\r\n    const handleClick = () => {\r\n        setDisplay(!display);\r\n    };\r\n\r\n    //Sulje metodit esc näppäimellä\r\n    useEsc(setDisplay, setSearch);\r\n\r\n    //Kaupunkien navigointi ja valinta\r\n    useNavigateCities(\r\n        setSelectedIndex,\r\n        results,\r\n        selectedIndex,\r\n        search,\r\n        setResults,\r\n        cities,\r\n        map,\r\n        setPosition,\r\n        setBounds,\r\n        setLoading,\r\n    );\r\n\r\n    //Palauta metodit tai valikkopainike\r\n    return display && tasks ? (\r\n        <div data-testid=\"mapmethods\" className=\"mapmethods\">\r\n            <button\r\n                title=\"sivuvalikon sulkeminen\"\r\n                data-testid=\"mapmethods-button\"\r\n                className=\"toggle\"\r\n                onClick={handleClick}\r\n            >\r\n                X\r\n            </button>\r\n            <h2>Kaupungit:</h2>\r\n            <input\r\n                title=\"hae ja suodata kaupunkeja\"\r\n                type=\"search\"\r\n                data-testid=\"city-input\"\r\n                id=\"city-input\"\r\n                autoFocus\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n                list=\"cities\"\r\n            ></input>\r\n            <div className=\"towns\">\r\n                <ul id=\"cities\">\r\n                    {results.map((city, index) => {\r\n                        let id; //Määritä li, johon kaupunkilistaus siirretään\r\n                        if (index === selectedIndex && selectedIndex >= 1) {\r\n                            id = \"selected\";\r\n                        } else if (\r\n                            index === selectedIndex &&\r\n                            selectedIndex === 0\r\n                        ) {\r\n                            id = \"selected\";\r\n                        }\r\n                        return (\r\n                            <li\r\n                                id={id}\r\n                                style={{\r\n                                    fontWeight:\r\n                                        index === selectedIndex\r\n                                            ? \"bold\"\r\n                                            : \"normal\",\r\n                                    backgroundColor:\r\n                                        index === selectedIndex\r\n                                            ? \"gray\"\r\n                                            : \"white\",\r\n                                }}\r\n                                key={index}\r\n                                value={[\r\n                                    parseFloat(city.lat),\r\n                                    parseFloat(city.lng),\r\n                                ]}\r\n                                onClick={() => {\r\n                                    moveMap(\r\n                                        [\r\n                                            parseFloat(city.lat),\r\n                                            parseFloat(city.lng),\r\n                                        ],\r\n                                        map,\r\n                                        setPosition,\r\n                                        setBounds,\r\n                                        setLoading,\r\n                                    );\r\n                                    setDisplay(false);\r\n                                    setSelectedIndex(index);\r\n                                }}\r\n                            >\r\n                                {city.city}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </div>\r\n            <div className=\"custom\">\r\n                <h2>Reittien haku kartan alueelta ja reittien tilastot:</h2>\r\n                <button\r\n                    disabled={loading}\r\n                    onClick={() => setCustomBounds(map, setBounds, setError)}\r\n                >\r\n                    Hae alueella olevat reitit\r\n                </button>\r\n                {error ? <p>{error}</p> : <></>}\r\n                <button\r\n                    data-testid=\"open-statbox-button\"\r\n                    onClick={() => setShowStatBox(true)}\r\n                >\r\n                    Näytä tilastot\r\n                </button>\r\n            </div>\r\n            <div className=\"filter\">\r\n                <h2>Suodata tehtävätyyppejä:</h2>\r\n                <ul className=\"tasks\">\r\n                    {tasks.map((task) => {\r\n                        return (\r\n                            <li\r\n                                className={\r\n                                    task.show === true ? \"selected-task\" : \"\"\r\n                                }\r\n                                key={task.id}\r\n                                onClick={() => {\r\n                                    toggleSelection(task.id, tasks, setTasks);\r\n                                }}\r\n                                style={{\r\n                                    fontWeight:\r\n                                        task.show === true ? \"bold\" : \"normal\",\r\n                                    backgroundColor:\r\n                                        task.show === true ? \"gray\" : \"white\",\r\n                                }}\r\n                            >\r\n                                {task.nameFi}\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n                <button\r\n                    data-testid=\"filter-button\"\r\n                    onClick={() => {\r\n                        handleFilter(tasks, setTasksFi, setFilterError);\r\n                    }}\r\n                >\r\n                    Suodata\r\n                </button>\r\n                <button\r\n                    data-testid=\"default-button\"\r\n                    onClick={() => {\r\n                        handleReset(type, tasksFi, setTasksFi);\r\n                    }}\r\n                >\r\n                    Palauta oletus\r\n                </button>\r\n                <button\r\n                    data-testid=\"empty-button\"\r\n                    onClick={() => {\r\n                        handleEmpty(tasks, setTasks);\r\n                    }}\r\n                >\r\n                    Tyhjennä valinta\r\n                </button>\r\n                {filterError ? (\r\n                    <p data-testid=\"error-text\">{filterError}</p>\r\n                ) : (\r\n                    <></>\r\n                )}\r\n            </div>\r\n            <div className=\"link\">\r\n                <NavLink\r\n                    data-testid=\"info-link\"\r\n                    to={\"/tietoa\"}\r\n                    className={({ isActive, isPending }) =>\r\n                        isPending ? \"pending\" : isActive ? \"active\" : \"\"\r\n                    }\r\n                >\r\n                    Tietoa sovelluksesta\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    ) : (\r\n        <div data-testid=\"min-mapmethods\" className=\"min-mapmethods\">\r\n            <button\r\n                disabled={loading}\r\n                data-testid=\"min-mapmethods-button\"\r\n                onClick={handleClick}\r\n            >\r\n                {\" \"}\r\n                <img src={bars} alt=\"sivuvalikon avaus\"></img>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport moveMap from \"../utils/moveMap\";\r\n\r\nexport default function useNavigateCities(\r\n    setSelectedIndex,\r\n    results,\r\n    selectedIndex,\r\n    search,\r\n    setResults,\r\n    cities,\r\n    map,\r\n    setPosition,\r\n    setBounds,\r\n    setLoading,\r\n) {\r\n    useEffect(() => {\r\n        const handleKeyDown = (event) => {\r\n            let li;\r\n            switch (event.key) {\r\n                case \"ArrowUp\":\r\n                    setSelectedIndex((prevIndex) =>\r\n                        prevIndex > 0 ? prevIndex - 1 : 0,\r\n                    );\r\n                    li = document.getElementById(\"selected\").previousSibling;\r\n                    if (li) {\r\n                        li.scrollIntoView({});\r\n                    }\r\n                    break;\r\n                case \"ArrowDown\":\r\n                    setSelectedIndex((prevIndex) =>\r\n                        prevIndex < results.length - 1\r\n                            ? prevIndex + 1\r\n                            : prevIndex,\r\n                    );\r\n                    li = document.getElementById(\"selected\");\r\n                    if (li) {\r\n                        li.scrollIntoView({});\r\n                    }\r\n                    break;\r\n                case \"Enter\":\r\n                    handleEnter(selectedIndex);\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n        };\r\n        const handleEnter = (selectedIndex) => {\r\n            moveMap(\r\n                [\r\n                    parseFloat(results[selectedIndex].lat),\r\n                    parseFloat(results[selectedIndex].lng),\r\n                ],\r\n                map,\r\n                setPosition,\r\n                setBounds,\r\n                setLoading,\r\n            );\r\n        };\r\n        window.addEventListener(\"keydown\", handleKeyDown);\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleKeyDown);\r\n        };\r\n    }, [\r\n        selectedIndex,\r\n        results,\r\n        setSelectedIndex,\r\n        map,\r\n        setPosition,\r\n        setBounds,\r\n        setLoading,\r\n    ]);\r\n\r\n    //Filteröi kaupungit haun mukaan\r\n    useEffect(() => {\r\n        let filteredResults;\r\n        if (typeof search === \"string\" && search.trim() === \"\") {\r\n            setResults(cities);\r\n            return;\r\n        } else if (typeof search === \"string\") {\r\n            filteredResults = cities.filter((item) =>\r\n                item.city.toLowerCase().includes(search.toLowerCase()),\r\n            );\r\n        }\r\n        setResults(filteredResults);\r\n        setSelectedIndex(0);\r\n    }, [cities, search, setResults, setSelectedIndex]);\r\n}\r\n","function toggleSelection(id, tasks, setTasks) {\r\n    const updatedItems = tasks.map((task) => {\r\n        if (task.id === id) {\r\n            return { ...task, show: !task.show };\r\n        }\r\n        return task;\r\n    });\r\n    setTasks(updatedItems);\r\n}\r\n\r\nfunction handleFilter(tasks, setTasksFi, setFilterError) {\r\n    //setTasksFi kutsu täällä, aseta tasksFi vastaamaan tasks\r\n    //Virheilmoitus mikäli yhtään tehtävätyyppiä ei ole valittuna\r\n    const hasShowValue = tasks.some((task) => task.show === true);\r\n    if (hasShowValue) {\r\n        setTasksFi(tasks);\r\n        setFilterError();\r\n    } else {\r\n        setFilterError(\"Valitse vähintään yksi tehtävätyyppi\");\r\n    }\r\n}\r\n\r\n//Palauttaa tehtävätyypit oletusarvoihin ylävalikosta valitun kalustotyypin mukaisesti\r\nfunction handleReset(type, tasksFi, setTasksFi) {\r\n    //setTasksFi kutsu täällä, nollaa ja aseta tasksFi show arvot karttatyypin mukaan kts. ../services/fetchTasks.js\r\n    //nollaus\r\n    let updatedItems = tasksFi.map((task) => {\r\n        return { ...task, show: false };\r\n    });\r\n    //show arvo karttatyypin mukaan\r\n    switch (type) {\r\n        case \"plough\":\r\n            updatedItems = updatedItems.map((task) => {\r\n                if (\r\n                    task.id === \"PLOUGHING_AND_SLUSH_REMOVAL\" ||\r\n                    task.id === \"LEVELLING_OF_ROAD_SURFACE\" ||\r\n                    task.id === \"REMOVAL_OF_BULGE_ICE\" ||\r\n                    task.id === \"LOWERING_OF_SNOWBANKS\" ||\r\n                    task.id === \"PREVENTING_MELTING_WATER_PROBLEMS\"\r\n                ) {\r\n                    return { ...task, show: !task.show };\r\n                }\r\n                return task;\r\n            });\r\n            break;\r\n        case \"sanding\":\r\n            updatedItems = updatedItems.map((task) => {\r\n                if (task.id === \"LINE_SANDING\" || task.id === \"SPOT_SANDING\") {\r\n                    return { ...task, show: !task.show };\r\n                }\r\n                return task;\r\n            });\r\n            break;\r\n        case \"brush\":\r\n            updatedItems = updatedItems.map((task) => {\r\n                if (task.id === \"BRUSHING\") {\r\n                    return { ...task, show: !task.show };\r\n                }\r\n                return task;\r\n            });\r\n            break;\r\n        default:\r\n            console.log(\"Error\");\r\n    }\r\n    setTasksFi(updatedItems);\r\n}\r\n\r\n//Tyhjennä valitut tehtävätyypit, ei vaikuta karttaan\r\nfunction handleEmpty(tasks, setTasks) {\r\n    //setTasks kutsu täällä\r\n    const updatedItems = tasks.map((task) => {\r\n        return { ...task, show: false };\r\n    });\r\n    setTasks(updatedItems);\r\n}\r\n\r\nexport { toggleSelection, handleFilter, handleReset, handleEmpty };\r\n","import { useEffect } from \"react\";\r\n\r\nexport default function useEsc(setDisplay, setSearch) {\r\n    useEffect(() => {\r\n        const handleEsc = (event) => {\r\n            if (event.key === \"Escape\") {\r\n                if (setDisplay) {\r\n                    setDisplay(false);\r\n                }\r\n                if (setSearch) {\r\n                    setSearch(\"\");\r\n                }\r\n            }\r\n        };\r\n        window.addEventListener(\"keydown\", handleEsc);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleEsc);\r\n        };\r\n    }, [setDisplay, setSearch]);\r\n}\r\n"],"names":["setCustomBounds","map","setBounds","setError","bounds","getBounds","roundedBounds","Math","round","_southWest","lat","lng","_northEast","MapMethods","_ref","setShowStatBox","tasksFi","setTasksFi","type","display","setDisplay","useState","loading","setLoading","error","search","setSearch","selectedIndex","setSelectedIndex","results","setResults","tasks","setTasks","filterError","setFilterError","setPosition","useMapContext","useEffect","handleClick","useEsc","cities","handleKeyDown","event","li","key","prevIndex","document","getElementById","previousSibling","scrollIntoView","length","handleEnter","moveMap","parseFloat","window","addEventListener","removeEventListener","filteredResults","trim","filter","item","city","toLowerCase","includes","useNavigateCities","_jsxs","className","children","_jsx","title","onClick","id","autoFocus","value","onChange","e","target","list","index","style","fontWeight","backgroundColor","disabled","_Fragment","task","show","toggleSelection","nameFi","some","handleFilter","updatedItems","console","log","handleReset","handleEmpty","NavLink","to","_ref2","isActive","isPending","src","bars","alt","handleEsc"],"sourceRoot":""}