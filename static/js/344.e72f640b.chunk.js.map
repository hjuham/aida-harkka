{"version":3,"file":"static/js/344.e72f640b.chunk.js","mappings":"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","sources":["components/recharts/RoutesByTask.js","components/recharts/RoutesByTime.js","components/StatBox.js","hooks/useEsc.js"],"sourcesContent":["import React from \"react\";\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    Tooltip,\r\n    XAxis,\r\n    CartesianGrid,\r\n    YAxis,\r\n    ResponsiveContainer,\r\n    Label,\r\n    LabelList,\r\n} from \"recharts\";\r\n\r\n/**\r\n * Recharts pylväsdiagrammi. Reitteihin käytetty aika tehtävätyypin mukaan. Kutsu StatBox.js komponentissa.\r\n * @constructor\r\n * @param {Object[]} data - Formatoitu data\r\n * @param {string} data[].name - Tehtävätyypin nimi\r\n * @param {number} data[].value - Tehtävätyyppiin käytetty aika\r\n */\r\nexport default function RoutesByTask({ data }) {\r\n    const bar = \"value\";\r\n    const xLabel = \"Tehtävätyypit\";\r\n    const yLabel = \"Tuntia\";\r\n    const CustomTooltip = ({ active, payload }) => {\r\n        if (active && payload) {\r\n            return (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: \"rgba(13, 0, 76)\",\r\n                        opacity: \"0.8\",\r\n                        padding: \"1em\",\r\n                    }}\r\n                    className=\"custom-tooltip\"\r\n                >\r\n                    <h3>{payload[0].payload.name}</h3>\r\n                    <p>{payload[0].value} tuntia</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    };\r\n    return (\r\n        <ResponsiveContainer height={\"95%\"}>\r\n            <BarChart\r\n                title={\"Reitit tehtävätyypin mukaan\"}\r\n                data={data}\r\n                margin={{ top: 5, right: 20, left: 10, bottom: 60 }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <Bar dataKey={bar} fill=\"#8884d8\">\r\n                    {\r\n                        //Näytä pylväiden nimet jos pylväitä on alle 10\r\n                        data.length < 10 ? (\r\n                            <>\r\n                                <LabelList dataKey=\"name\" position=\"bottom\" />\r\n                                <LabelList dataKey=\"value\" position=\"top\" />\r\n                            </>\r\n                        ) : (\r\n                            <></>\r\n                        )\r\n                    }\r\n                </Bar>\r\n                <XAxis tick={false}>\r\n                    <Label value={xLabel} fontSize={20} position=\"bottom\" offset={25} />\r\n                </XAxis>\r\n                <YAxis domain={[0, \"dataMax + 5\"]}>\r\n                    <Label\r\n                        value={yLabel}\r\n                        fontSize={20}\r\n                        position=\"left\"\r\n                        angle={-90}\r\n                        offset={-10}\r\n                        style={{ textAnchor: \"middle\" }}\r\n                    />\r\n                </YAxis>\r\n                <Tooltip content={<CustomTooltip />} cursor={false} />\r\n            </BarChart>\r\n        </ResponsiveContainer>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    BarChart,\r\n    Bar,\r\n    Tooltip,\r\n    XAxis,\r\n    CartesianGrid,\r\n    YAxis,\r\n    ResponsiveContainer,\r\n    Label,\r\n    LabelList,\r\n} from \"recharts\";\r\n\r\n/**\r\n * Recharts pylväsdiagrammi. Reitteihin käytetty aika ajan mukaan. Kutsu StatBox.js komponentissa.\r\n * @constructor\r\n * @param {Object[]} data - Formatoitu data\r\n * @param {string} data[].name -  Tuntia sitten\r\n * @param {number} data[].value - Tuntia sitten käytetty aika\r\n * @param {string} data[].fill - Pylvään väri, määritetty StatBox.js komponentissa ajan mukaan\r\n */\r\n\r\nexport default function RoutesByTime({ data }) {\r\n    const CustomTooltip = ({ active, payload }) => {\r\n        if (active && payload) {\r\n            return (\r\n                <div\r\n                    style={{\r\n                        backgroundColor: \"rgba(13, 0, 76)\",\r\n                        opacity: \"0.8\",\r\n                        padding: \"1em\",\r\n                    }}\r\n                    className=\"custom-tooltip\"\r\n                >\r\n                    <h3>{payload[0].payload.name} tuntia sitten käytetty aika:</h3>\r\n                    <p>{payload[0].value} tuntia</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        return null;\r\n    };\r\n    const bar = \"value\";\r\n    const xLabel = \"Tuntia sitten\";\r\n    const yLabel = \"Tuntia\";\r\n    return (\r\n        <ResponsiveContainer height={\"95%\"}>\r\n            <BarChart\r\n                title={\"Reitit ajan mukaan\"}\r\n                data={data}\r\n                margin={{ top: 5, right: 20, left: 10, bottom: 60 }}\r\n            >\r\n                <CartesianGrid strokeDasharray=\"3 3\" />\r\n                <Bar dataKey={bar} fill=\"#82ca9d\">\r\n                    <LabelList dataKey=\"value\" position=\"top\" />\r\n                </Bar>\r\n                <XAxis tick={true}>\r\n                    <Label value={xLabel} fontSize={20} position=\"bottom\" />\r\n                </XAxis>\r\n                <YAxis domain={[0, \"dataMax + 1\"]}>\r\n                    <Label\r\n                        value={yLabel}\r\n                        position=\"left\"\r\n                        angle={-90}\r\n                        fontSize={20}\r\n                        offset={-10}\r\n                        style={{ textAnchor: \"middle\" }}\r\n                    />\r\n                </YAxis>\r\n                <Tooltip content={<CustomTooltip />} cursor={false} />\r\n            </BarChart>\r\n        </ResponsiveContainer>\r\n    );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport RoutesByTask from \"./recharts/RoutesByTask\";\r\nimport RoutesByTime from \"./recharts/RoutesByTime\";\r\nimport useEsc from \"../hooks/useEsc\";\r\n\r\n/**\r\n * Tilastolaatikko. Kutsu Map.js komponentissa. Avataan MapMethods.js komponentista. Sisältää reitteihin käytetyn ajan yhteensä ja kutsun Recharts kuvaajiin.\r\n * Tilastolaatikko on mahdollista sulkea oikeasta yläkulmasta.\r\n * @param {boolean} showStatBox - Näytä tai piilota tilastolaatikko\r\n * @param {useState} setShowStatBox - Aseta tilastolaatikon näkyvyys (kutsu x-merkkiä painettaessa)\r\n * @param {Object[]} rotues - Reitit, joiden avulla näytettävät tilastot muodostetaan\r\n * @param {Date} date - Tuotu Date-olio. Määrittely komponentin ulkopuolella mikäli sovellus käyttää paikallista dataa, jolloin arvo on tallennusajankohta.\r\n * @param {Object[]} tasksFi - Tehtävätyypit, käytetään alustamaan tehtävätyyppeihin käytetyn ajan diagrammi.\r\n */\r\n\r\nexport default function StatBox({\r\n    showStatBox,\r\n    setShowStatBox,\r\n    routes,\r\n    date,\r\n    tasksFi,\r\n}) {\r\n    const [chartTitle, setChartTitle] = useState(\r\n        \"Valittuihin tehtävätyyppeihin käytetty aika tehtävätyypin mukaan\",\r\n    );\r\n\r\n    const handleSelectChange = (event) => {\r\n        setChartTitle(event.target.value);\r\n    };\r\n\r\n    //Reitteihin käytetty aika yhteensä\r\n    let duration = 0;\r\n    //Tehtävätyyppeihin käytetty aika (alusta tasksFi arvoilla joiden show arvo on true)\r\n    let typeChartData = {};\r\n\r\n    if (tasksFi) {\r\n        tasksFi.forEach((element) => {\r\n            if (element.show === true) {\r\n                typeChartData[element.nameFi] = 0;\r\n            }\r\n        });\r\n    }\r\n\r\n    //Tehtäviin käytetty aika ajan mukaan\r\n    let timeChartData = {};\r\n\r\n    routes.forEach((route) => {\r\n        //Aika yhteensä\r\n        let time =\r\n            new Date(route.properties.endTime) -\r\n            new Date(route.properties.startTime);\r\n\r\n        // duration += time\r\n        //Käydään läpi kaikki tehtävänimikkeet, jos tehtävänimike löytyy alustetusta oliosta lisätään reittiin käytetty aika.\r\n        //Tällä toteutuksella duration on suurempi kuin todellinen käytetty aika, sillä reitti voi kasvattaa useamman tehtävänimikkeen aikaa.\r\n        //duration rivillä 43 tai 50 toteutuksen mukaan\r\n        route.properties.task_fi.forEach((e) => {\r\n            if (typeChartData[e] !== undefined) {\r\n                typeChartData[e] += time;\r\n                duration += time;\r\n            }\r\n        });\r\n\r\n        //Tehtäviin käytetty aika ajan mukaan (tunnin välein)\r\n        let hoursAgo = Math.round(\r\n            (date - new Date(route.properties.endTime)) / (1000 * 60 * 60),\r\n        );\r\n        if (timeChartData[hoursAgo]) {\r\n            timeChartData[hoursAgo] += time;\r\n        } else {\r\n            timeChartData[hoursAgo] = time;\r\n        }\r\n    });\r\n    //Muunna tehtävätyyppeihin käytetty aika kuvaajalle käytettävään muotoon\r\n    let typeArray = Object.keys(typeChartData).map((key, index) => ({\r\n        name: key,\r\n        value: Math.round((typeChartData[key] / (60 * 1000 * 60)) * 10) / 10,\r\n    }));\r\n    typeArray.sort((a, b) => {\r\n        return b.value - a.value;\r\n    });\r\n    //Täytä timeChartDatan tyhjät kohdat\r\n    for (let i = 0; i < 24; i++) {\r\n        if (timeChartData[i] === undefined) {\r\n            timeChartData[i] = 0;\r\n        }\r\n    }\r\n    const timeArray = Object.keys(timeChartData).map((key) => {\r\n        //Määrittele pylvään väri\r\n        let color;\r\n        if (key <= 5) {\r\n            color = \"#238823\";\r\n        } else if (key <= 10) {\r\n            color = \"#ffbf00\";\r\n        } else {\r\n            color = \"#d2222d\";\r\n        }\r\n        return {\r\n            name: key,\r\n            value:\r\n                Math.round((timeChartData[key] / (60 * 1000 * 60)) * 10) / 10,\r\n            fill: color,\r\n        };\r\n    });\r\n\r\n    //Piilota esc-näppäimellä\r\n    useEsc(setShowStatBox);\r\n\r\n    let graph;\r\n    if (chartTitle === \"Valittuihin tehtävätyyppeihin käytetty aika tehtävätyypin mukaan\") {\r\n        graph = <RoutesByTask data={typeArray} />;\r\n    } else if (chartTitle === \"Reitteihin käytetty aika ajan mukaan\") {\r\n        graph = <RoutesByTime data={timeArray} />;\r\n    }\r\n\r\n    if (showStatBox === true) {\r\n        return (\r\n            <div className=\"statbox\">\r\n                <button\r\n                    data-testid=\"statbox-close-button\"\r\n                    onClick={() => setShowStatBox(false)}\r\n                >\r\n                    X\r\n                </button>\r\n                <h2>Alueella olevien reittien ja ajoneuvojen tilastot</h2>\r\n                <p>Huomioi kartalla rajattu alue ja \"Suodata tehtävätyyppejä\" valikko</p>\r\n                <p>\r\n                    <b>Reitteihin käytetty aika: </b>\r\n                    {Math.round(duration / (1000 * 60 * 60))} tunti(a)\r\n                </p>\r\n                <label htmlFor=\"charts\">Valitse kuvaaja: </label>\r\n                <select\r\n                    name=\"charts\"\r\n                    value={chartTitle}\r\n                    onChange={handleSelectChange}\r\n                >\r\n                    <option value=\"Valittuihin tehtävätyyppeihin käytetty aika tehtävätyypin mukaan\">\r\n                        Tehtävätyypit\r\n                    </option>\r\n                    <option value=\"Reitteihin käytetty aika ajan mukaan\">\r\n                        Ajan mukaan\r\n                    </option>\r\n                </select>\r\n                <div className=\"chartDiv\">\r\n                    <h2>{chartTitle}</h2>\r\n                    {graph}\r\n                </div>\r\n            </div>\r\n        );\r\n    } else {\r\n        return <></>;\r\n    }\r\n}\r\n","import { useEffect } from \"react\";\r\n\r\nexport default function useEsc(setDisplay, setSearch) {\r\n    useEffect(() => {\r\n        const handleEsc = (event) => {\r\n            if (event.key === \"Escape\") {\r\n                if (setDisplay) {\r\n                    setDisplay(false);\r\n                }\r\n                if (setSearch) {\r\n                    setSearch(\"\");\r\n                }\r\n            }\r\n        };\r\n        window.addEventListener(\"keydown\", handleEsc);\r\n\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleEsc);\r\n        };\r\n    }, [setDisplay, setSearch]);\r\n}\r\n"],"names":["RoutesByTask","_ref","data","CustomTooltip","_ref2","active","payload","_jsxs","style","backgroundColor","opacity","padding","className","children","_jsx","name","value","ResponsiveContainer","height","BarChart","title","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","Bar","dataKey","fill","length","_Fragment","LabelList","position","XAxis","tick","Label","fontSize","offset","YAxis","domain","angle","textAnchor","Tooltip","content","cursor","RoutesByTime","StatBox","showStatBox","setShowStatBox","routes","date","tasksFi","chartTitle","setChartTitle","useState","handleSelectChange","event","target","duration","typeChartData","forEach","element","show","nameFi","timeChartData","route","time","Date","properties","endTime","startTime","task_fi","e","undefined","hoursAgo","Math","round","typeArray","Object","keys","map","key","index","sort","a","b","i","timeArray","color","graph","useEsc","onClick","htmlFor","onChange","setDisplay","setSearch","useEffect","handleEsc","window","addEventListener","removeEventListener"],"sourceRoot":""}